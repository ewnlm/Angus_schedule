#!/usr/bin/perl -w
  use strict;
  use experimental 'smartmatch'; # perl 5.18
  my $debug=0;
  my @staff;
  my (%schedule, %weekdays);
  my @day_off;
  my $weekday;
  my @class_unit = (7.5, 7.5, 7.5, 8, 6.5, 9, 9, 9);
  my @time_card;
  srand();
  print "===== Debug Mode =====\n", if($debug); 
  ### Staff {{{
  open FP, "staff.csv";
  while(<FP>) {
    chomp($_);
    push @staff, $_;
  }
  close FP;
  print " >>> Staff list:@staff\n", if($debug);
  #}}}
  ### Day off {{{
  open FP, "day_off.csv";
  while(<FP>) {
    push @day_off, [$1, $2], if(/(\w+),(\w+)/);
  }
  close FP;
  if($debug) {
    for my $i(0..$#day_off) {
      print "$i, ";
      for my $j(0..$#{$day_off[$i]}) {
	print "$day_off[$i][$j],"
      }
      print "\n";
    }
  }
  # }}}
  ### Calendar {{{
  my $nu_week = `echo -n "\$((\`cal -h| wc -l\`-2))"`;
  my @cal_weeks = `cal -h | tail -n $nu_week | head -n \$(($nu_week-1))`;
  my $first_sunday = $1, if($cal_weeks[0]=~/(\d)\s*$/);
  my $last_day = $1, if($cal_weeks[$#cal_weeks]=~/(\d+)\s*$/);
  print " >>> First sunday of month: $first_sunday\n", if($debug);
  print " >>> The last day of month: $last_day\n", if($debug);
  my $begin_weekday;
  ($first_sunday==7)?($begin_weekday=1):($begin_weekday=7-$first_sunday);
  my $compensation = $begin_weekday-1;
  my $cnt=0;
  for my $day(1..$last_day) {
    $weekday = (($day%7)+$compensation)%7;
    $weekday = 7, if($weekday==0);
    print " >>> Day: $day, Weekday: $weekday\n", if($debug);
    ### $schedule{$day} = [Class]
    ### $weekdays{$day} = $weekday;
    $weekdays{$day} = $weekday;
    if($weekday == 7 ) {
      push @{$schedule{$day}}, 1..8;
    } elsif($weekday == 6) {
      push @{$schedule{$day}}, @{$day_off[$cnt]};
      push @{$schedule{$day}}, 3..8;
      $cnt++;
    } else {
      push @{$schedule{$day}}, 1..8;
    }
  }
  # }}}
  ### Scheduling {{{
  # 
  ### }}}
  #}
  print "======================\n", if($debug); 
  sub ary_shuffle {
    ### sub function ary_shuffle {{{
    my @ary = @_;
    my $nu=int rand(50);
    $nu = 2;
    if($nu%2==0) {
      @ary = reverse @ary;
    }
    if($nu%3==0) {
      for my $i(map {$_*2} 0..(int($#ary/2)+($#ary%2))) {
	($i>=$#ary)?(@ary[$#ary,0]=@ary[0,$#ary]):(
	  @ary[$i,$i+1]=@ary[$i+1,$i])}
    }
    if($nu%5==0) {
      my $times = int $nu/5;
      my $lr = $times%2;
      for my $i(0..$times) {
	($lr)?(push @ary, shift @ary):
	(unshift @ary, pop @ary);
      }
    }
    @ary;
    ### }}}
  }
