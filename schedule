#!/usr/bin/perl -w
  use strict;
  use experimental 'smartmatch'; # perl 5.18
  my $debug=0;
  my @staff;
  my (%schedule, %weekdays);
  my @day_off;
  my $weekday;
  my @class_unit = (7.5, 7.5, 7.5, 8, 6.5, 9, 9, 9);
  my %timecard;
  my %class;
  srand();
  print "===== Debug Mode =====\n", if($debug); 
  ### Staff {{{
  open FP, "staff.csv";
  while(<FP>) {
    chomp($_);
    push @staff, $_;
  }
  close FP;
  print " >>> Staff list:@staff\n", if($debug);
  #}}}
  ### Day off {{{
  open FP, "day_off.csv";
  while(<FP>) {
    push @day_off, [$1, $2], if(/(\w+),(\w+)/);
  }
  close FP;
  if($debug) {
    for my $i(0..$#day_off) {
      print "$i, ";
      for my $j(0..$#{$day_off[$i]}) {
	print "$day_off[$i][$j],"
      }
      print "\n";
    }
  }
  # }}}
  ### Calendar {{{
  my $nu_week = `echo -n "\$((\`cal -h| wc -l\`-2))"`;
  my @cal_weeks = `cal -h | tail -n $nu_week | head -n \$(($nu_week-1))`;
  my $first_sunday = $1, if($cal_weeks[0]=~/(\d)\s*$/);
  my $last_day = $1, if($cal_weeks[$#cal_weeks]=~/(\d+)\s*$/);
  print " >>> First sunday of month: $first_sunday\n", if($debug);
  print " >>> The last day of month: $last_day\n", if($debug);
  my $begin_weekday;
  ($first_sunday==7)?($begin_weekday=1):($begin_weekday=7-$first_sunday);
  my $compensation = $begin_weekday-1;
  my $cnt=0;
  for my $day(1..$last_day) {
    $weekday = (($day%7)+$compensation)%7;
    $weekday = 7, if($weekday==0);
    print " >>> Day: $day, Weekday: $weekday\n", if($debug);
    ### $schedule{$day} = [Class]
    ### $weekdays{$day} = $weekday;
    $weekdays{$day} = $weekday;
    if($weekday == 7 ) {
      push @{$schedule{$day}}, 1..5;
    } elsif($weekday == 6) {
      push @{$schedule{$day}}, @{$day_off[$cnt]};
      push @{$schedule{$day}}, 3..8;
      $cnt++;
    } else {
      push @{$schedule{$day}}, 1..5;
    }
  }
  # }}}
  ### Scheduling {{{
  my $get_first_day=0;
  $cnt = 0;
  for my $d(sort {$a<=>$b} keys %schedule) {
    ($weekdays{$d}<6 and !$get_first_day)?($get_first_day=1):($get_first_day=$get_first_day);
    if($get_first_day and ($weekdays{$d}==1 or $weekdays{$d}==4 or $d==1)) {
      ### Monday /Thursday or the first day of month
      @{$schedule{$d}} = &ary_shuffle(@staff);
      ### Timecard calculate
      map {$timecard{$schedule{$d}[$_]}+=$class_unit[$_], if($schedule{$d}[$_]!~/^\d/)} 
      0..$#{$schedule{$d}};
    }
    if($d!=1 and $get_first_day and ($weekdays{$d}==2 or $weekdays{$d}==5)) {
      my @yesterday = &ary_shuffle(@{$schedule{$d-1}}[0,2,3]);
      @{$schedule{$d}}[1..2] = @yesterday[0..1]; 
      @yesterday[0..1] = @{$schedule{$d-1}}[1,4];
      @{$schedule{$d}}[3,0,4] = sort {$timecard{$a}<=>$timecard{$b}} @yesterday;
    }
    if($d!=1 and $get_first_day and $weekdays{$d}==3) {
      my @tuesday = &ary_shuffle(@{$schedule{$d-1}}[0,2,3]);
      @{$schedule{$d}}[0,2] = @tuesday[0..1];
      @tuesday[0..1] = @{$schedule{$d-1}}[1,4];
      @{$schedule{$d}}[3,1,4] = sort {$timecard{$a}<=>$timecard{$b}} @tuesday;
      ### Timecard calculate
      map {$timecard{$schedule{$d}[$_]}+=$class_unit[$_], if($schedule{$d}[$_]!~/^\d/)} 
      0..$#{$schedule{$d}};
    }
    if($d!=1 and $get_first_day and $weekdays{$d}==6) {
      @{$schedule{$d}} = map {(/[345]/)?("X"):($_)} @{$schedule{$d}};
      my @saturday = grep {!($_ ~~ @{$schedule{$d}}[0..1])} @staff;
      @{$schedule{$d}}[5..7] = &ary_shuffle(@saturday);
    }

    @{$schedule{$d}}= map {"None"} @{$schedule{$d}}, if($weekdays{$d}==7);
  }
  ### }}}
  ### Summary class and timecard {{{
  %timecard = ();
  for my $d(sort {$a<=>$b} keys %schedule) {
    if($weekdays{$d}!=7 and $weekdays{$d}!=6) {
      map {$timecard{$schedule{$d}[$_]}+=$class_unit[$_]} 0..$#{$schedule{$d}};
    }
    if($weekdays{$d}==6) {
      map {$timecard{$schedule{$d}[$_]}+=$class_unit[$_]} 5..7;
    }
  }
  for my $d(sort {$a<=>$b} keys %schedule) {
    if($weekdays{$d}<=5) {
      for my $c(0..4) {
	$class{$schedule{$d}[$c]}{$c}++;
      }
    }
    if($weekdays{$d}==6) {
      for my $c(5..7) {
	$class{$schedule{$d}[$c]}{$c}++;
      }
    }
  }
  ### }}}
  ### Output summary {{{
  open FP, "> result.csv";
  print FP "Day,Weekday,";
  print FP "Class1,Class2,Class3,Class4,Class5,Class6,Class7,Class8\n";
  for my $d(sort {$a<=>$b} keys %schedule) {
    print FP "$d,$weekdays{$d},", join ",", @{$schedule{$d}}, "\n";
  }
  print FP "\nMan,";
  print FP "Class1,Class2,Class3,Class4,Class5,Class6,Class7,Class8\n";
  for my $man(sort keys %class) {
    print FP "$man, ";
    for my $c(0..7) {
      if(exists $class{$man}{$c}) {
	print FP "$class{$man}{$c},";
      } else {
	print FP "0,";
      }
    }
    print FP "\n";
  }
  print FP "\nTotal work hours\n";
  for my $man(sort keys %timecard) {
    print FP "$man,$timecard{$man}\n";
  }
  close FP;
  ###}}}
  print "======================\n", if($debug); 

  sub ary_shuffle {
    ### sub function ary_shuffle {{{
    my @ary = @_;
    my $nu=int rand(50);
    my $lr = $nu%2;
    for my $i(0..$nu) {
      ($lr)?(push @ary, shift @ary):
      (unshift @ary, pop @ary);
    }
    if($nu%3==0) {
      for my $i(map {$_*2} 0..(int($#ary/2)+($#ary%2))) {
	($i>=$#ary)?(@ary[$#ary,0]=@ary[0,$#ary]):(
	  @ary[$i,$i+1]=@ary[$i+1,$i])}
    }
    if($nu%5==0) {
      @ary = reverse @ary;
    }
    @ary;
    ### }}}
  }
